# Shared configurations using YAML anchors
x-nats-healthcheck: &nats-healthcheck
  # NATS minimal container doesn't have nc/curl, using nats-server binary check
  test: ["CMD", "/nats-server", "--version"]
  interval: 10s
  timeout: 5s
  retries: 5
  start_period: 15s

x-service-healthcheck: &service-healthcheck
  test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 30s

x-common-env: &common-env
  NATS_CLUSTER_ID: ${NATS_CLUSTER_ID:-market-data-cluster}
  LOG_FORMAT: ${LOG_FORMAT:-json}
  LOG_LEVEL: ${LOG_LEVEL:-INFO}
  ENVIRONMENT: ${ENVIRONMENT:-development}
  DEBUG: ${DEBUG:-false}
  PYTHONUNBUFFERED: 1

services:
  # NATS Message Broker
  nats:
    image: nats:${NATS_VERSION:-latest}
    container_name: ${NATS_CONTAINER_NAME:-nats}
    # Always load server configuration (auth, jetstream, limits)
    command: ${NATS_COMMAND:--c /etc/nats/nats-server.conf}
    ports:
      - "${NATS_CLIENT_PORT:-4222}:4222"
      - "${NATS_MONITOR_PORT:-8222}:8222"
      - "${NATS_CLUSTER_PORT:-6222}:6222"
    volumes:
      # Always mount config directory
      - ./config:/etc/nats:ro
      - nats-data:/data
    environment:
      # NATS environment variables
      - NATS_LOG_LEVEL=${NATS_LOG_LEVEL:-debug}
    healthcheck: *nats-healthcheck
    networks:
      - market-data-network
    restart: ${RESTART_POLICY:-unless-stopped}

  # Market Data Service
  market-data-service:
    container_name: ${SERVICE_CONTAINER_NAME:-market-data-service}
    build:
      context: .
      dockerfile: Dockerfile
      args:
        HTTP_PROXY: ${HTTP_PROXY:-}
        HTTPS_PROXY: ${HTTPS_PROXY:-}
    image: ${SERVICE_IMAGE:-market-data-service:local}

    environment:
      <<: *common-env
      NATS_URL: ${NATS_URL:-nats://nats:4222}
      NATS_CLIENT_ID: ${NATS_CLIENT_ID:-market-data-service-1}
      NATS_USER: ${NATS_USER:-}
      NATS_PASSWORD: ${NATS_PASSWORD:-}
    depends_on:
      - nats
    healthcheck: *service-healthcheck
    volumes:
      # Logs directory (safe to mount in all envs)
      - ${SOURCE_MOUNT:-./logs}:/app/logs
    networks:
      - market-data-network
    restart: ${RESTART_POLICY:-unless-stopped}
    # Resource limits (optional, set via env)
    deploy:
      resources:
        limits:
          cpus: ${SERVICE_CPU_LIMIT:-1}
          memory: ${SERVICE_MEMORY_LIMIT:-1G}
        reservations:
          cpus: ${SERVICE_CPU_RESERVE:-0.5}
          memory: ${SERVICE_MEMORY_RESERVE:-512M}

  # Live Ingest (optional) — only starts with --profile live
  # Runs the live ingest composition entrypoint (python -m src.main)
  market-data-live:
    container_name: ${SERVICE_LIVE_CONTAINER_NAME:-market-data-live}
    image: ${SERVICE_IMAGE:-market-data-service:local}
    entrypoint: ["python", "-m", "src.main"]
    environment:
      <<: *common-env
      # Enable live ingest mode and (optionally) bounded runtime
      MD_RUN_INGEST: "1"
      MD_DURATION_SECONDS: ${MD_DURATION_SECONDS:-0}
      # Auto-switch NATS URL: inside Docker → nats://nats:4222, on host → nats://127.0.0.1:4222
      LIVE_NATS_AUTOMODE: ${LIVE_NATS_AUTOMODE:-1}
      # CTP live connector: module:attr form. Default uses built-in vn.py connector.
      CTP_GATEWAY_CONNECT: ${CTP_GATEWAY_CONNECT:-src.infrastructure.ctp_live_connector:live_gateway_connect}
      # Initial vt_symbol subscription seed for routing readiness (e.g. rb9999.SHFE)
      CTP_SYMBOL: ${CTP_SYMBOL:-}
      # NATS connectivity (auth optional)
      NATS_URL: ${NATS_URL:-}
      NATS_USER: ${NATS_USER:-}
      NATS_PASSWORD: ${NATS_PASSWORD:-}
    # Load secrets from env file (do not commit real secrets)
    env_file:
      - .env
    depends_on:
      - nats
    healthcheck: *service-healthcheck
    volumes:
      - ${SOURCE_MOUNT:-./logs}:/app/logs
    networks:
      - market-data-network
    restart: ${RESTART_POLICY:-unless-stopped}
    deploy:
      resources:
        limits:
          # Suggested live limits; override via env if needed
          cpus: ${SERVICE_LIVE_CPU_LIMIT:-2}
          memory: ${SERVICE_LIVE_MEMORY_LIMIT:-2G}
        reservations:
          cpus: ${SERVICE_LIVE_CPU_RESERVE:-1}
          memory: ${SERVICE_LIVE_MEMORY_RESERVE:-1G}
    profiles: ["live"]

  # Monitoring - NATS Prometheus Exporter (optional)
  nats-exporter:
    image: natsio/prometheus-nats-exporter:${EXPORTER_VERSION:-latest}

    command:
      - -varz
      - -jsz=all
      - http://nats:8222
    ports:
      - "${METRICS_PORT:-7777}:7777"
    depends_on:
      - nats
    networks:
      - market-data-network
    restart: ${RESTART_POLICY:-unless-stopped}
    profiles: ["monitoring"]  # Only starts when --profile monitoring is used

volumes:
  nats-data:

networks:
  market-data-network:
    driver: bridge
