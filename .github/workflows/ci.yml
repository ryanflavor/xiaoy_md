name: Code Quality CI

# Performance target: CI should complete in <5 minutes (addresses TEST-001)
# Failure notifications: GitHub Actions automatically emails on failures (addresses OPS-001)
# For advanced notifications, configure GitHub repository settings or add webhook step

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: read

jobs:
  quality:
    name: Code Quality and Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Prevent infinite runs - addresses trace gap

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: |
            **/pyproject.toml
            **/uv.lock

      - name: Install dependencies
        run: |
          uv sync --frozen

      - name: Run Black formatting check
        run: |
          uv run black --check --diff src/ tests/ scripts/

      - name: Run Mypy type checking
        run: |
          uv run mypy src scripts tests

      - name: Run architecture validation
        run: |
          if [ -f scripts/check_architecture.py ]; then
            uv run python scripts/check_architecture.py
          else
            echo "Architecture validation script not found, skipping..."
          fi

      - name: Run test suite
        run: |
          uv run pytest tests/ -v --tb=short --cov=src --cov-report=term-missing --cov-report=xml

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  docker-build:
    name: Docker Build Verification
    runs-on: ubuntu-latest
    needs: quality  # Only run if quality checks pass
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false  # DO NOT push to registry
          tags: |
            market-data-service:${{ github.sha }}
            market-data-service:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            HTTP_PROXY=${{ secrets.HTTP_PROXY }}
            HTTPS_PROXY=${{ secrets.HTTPS_PROXY }}

      - name: Verify Docker image
        run: |
          docker images market-data-service:${{ github.sha }}
          IMAGE_SIZE=$(docker images market-data-service:${{ github.sha }} --format "{{.Size}}")
          echo "Docker image size: $IMAGE_SIZE"

          # Check image size is under 200MB
          SIZE_MB=$(docker images market-data-service:${{ github.sha }} --format "{{.Size}}" | sed 's/MB//')
          if [ "${SIZE_MB%%.*}" -gt 200 ]; then
            echo "ERROR: Image size exceeds 200MB limit"
            exit 1
          fi

      - name: Test container startup
        run: |
          # Start container with test environment
          docker run -d --name test-container \
            -e NATS_URL=nats://test:4222 \
            -e NATS_CLUSTER_ID=test-cluster \
            -e NATS_CLIENT_ID=test-client \
            market-data-service:${{ github.sha }}

          # Wait for startup
          sleep 5

          # Check container is running
          docker ps | grep test-container

          # Check logs for successful startup
          docker logs test-container 2>&1 | grep "Market Data Service started successfully"

          # Stop container
          docker stop test-container
          docker rm test-container

      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'market-data-service:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'  # Fail build on critical/high vulnerabilities

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()  # Upload even if scan fails
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Verify non-root user
        run: |
          # Verify container runs as non-root user
          USER_ID=$(docker run --rm market-data-service:${{ github.sha }} id -u)
          if [ "$USER_ID" = "0" ]; then
            echo "ERROR: Container runs as root user (uid=0)"
            exit 1
          fi
          echo "âœ“ Container runs as non-root user (uid=$USER_ID)"
