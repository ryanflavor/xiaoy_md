[project]
name = "market-data-service"
version = "0.1.0"
description = "A high-performance market data service using hexagonal architecture"
readme = "README.md"
requires-python = ">=3.13,<3.14"
license = {text = "MIT"}
authors = [
    {name = "Development Team", email = "dev@example.com"}
]
keywords = ["market-data", "trading", "nats", "hexagonal-architecture"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Office/Business :: Financial :: Investment",
]

dependencies = [
    "pydantic>=2.5.0",
    "nats-py>=2.7.0",
    "asyncio-mqtt>=0.16.0",
    "python-json-logger>=2.0.0",
    "python-dotenv>=1.0.0",
    "pydantic-settings>=2.10.1",
]



[project.urls]
Homepage = "https://github.com/yourorg/market-data-service"
Documentation = "https://market-data-service.readthedocs.io"
Repository = "https://github.com/yourorg/market-data-service.git"
Issues = "https://github.com/yourorg/market-data-service/issues"

[project.scripts]
market-data = "src.__main__:main"

[project.optional-dependencies]
ctp = [
    "vnpy>=4.1.0",
    "vnpy-ctp>=6.7.7.2",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
packages = ["src"]

[tool.uv]
dev-dependencies = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "faker>=22.0.0",
    "hypothesis>=6.92.0",
    "black==24.10.0",
    "mypy>=1.8.0",
    "ruff==0.8.0",
    "pre-commit>=3.6.0",
    "detect-secrets>=1.5.0",
    "types-pyyaml>=6.0.12.20250822",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings>=0.24.0",
    "mkdocstrings-python>=1.7.0",
    "pytest-timeout>=2.4.0",
]

# Black: Code formatting (focus on style consistency)
[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
preview = false  # Disable preview features for stability

# Exclude patterns
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
  | \.bmad-core
  | references
)/
'''

# Force consistent string quotes
skip-string-normalization = false  # Normalize to double quotes
skip-magic-trailing-comma = false  # Keep magic trailing commas

# Mypy type checker configuration
[tool.mypy]
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
disallow_any_generics = false
disallow_subclassing_any = false
no_implicit_optional = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
show_error_codes = true
pretty = true
namespace_packages = true
explicit_package_bases = true
exclude = [
    "docs/",
    "build/",
    "dist/",
    ".venv/",
    "venv/",
    "references/",
    "htmlcov/",
    ".git/",
    "__pycache__/",
]

# Mypy per-module options
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false  # Don't require type annotations
check_untyped_defs = true       # But check code inside untyped functions
disallow_untyped_calls = false  # Allow calling untyped functions
disallow_incomplete_defs = false
warn_return_any = false
warn_unused_ignores = false

[[tool.mypy.overrides]]
module = "nats.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "asyncio_mqtt.*"
ignore_missing_imports = true

# isort configuration removed - using Ruff's import sorting (I rules)

# Ruff: Modern Python linter (replaces flake8, isort, pyupgrade, etc.)
[tool.ruff]
target-version = "py313"
line-length = 88  # Match Black
fix = false  # Disable global auto-fix; use pre-commit to apply fixes

# Exclude reference and build directories
exclude = [
    "references/",
    ".bmad-core/",
    ".git/",
    ".venv/",
    "build/",
    "dist/",
    "__pycache__/",
]

[tool.ruff.lint]

# Enable comprehensive rule sets
select = [
    # Core quality rules
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort (import sorting)
    "N",     # pep8-naming
    "D",     # pydocstyle (docstring conventions)

    # Advanced code quality
    "B",     # flake8-bugbear (common bugs)
    "C4",    # flake8-comprehensions
    "SIM",   # flake8-simplify
    "UP",    # pyupgrade (modern Python)
    "RUF",   # Ruff-specific rules

    # Security & best practices

    "BLE",   # flake8-blind-except
    "FBT",   # flake8-boolean-trap
    "A",     # flake8-builtins
    "COM",   # flake8-commas
    "ICN",   # flake8-import-conventions
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest-style

    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "TID",   # flake8-tidy-imports
    "TCH",   # flake8-type-checking
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "ERA",   # eradicate (commented-out code)
    "PGH",   # pygrep-hooks
    "PL",    # pylint
    "TRY",   # tryceratops
    "PERF",  # perflint
]

# Ignore rules that conflict with Black or are too strict for this project
ignore = [
    # Formatting (handled by Black)
    "E501",   # line too long
    "W191",   # indentation contains tabs
    "E111",   # indentation is not a multiple of four
    "E114",   # indentation is not a multiple of four (comment)
    "E117",   # over-indented
    "D206",   # docstring should be indented with spaces
    "D300",   # use """triple double quotes"""

    # Too strict for development
    "D100",   # missing docstring in public module
    "D101",   # missing docstring in public class
    "D102",   # missing docstring in public method
    "D103",   # missing docstring in public function
    "D104",   # missing docstring in public package
    "D105",   # missing docstring in magic method
    "S101",   # use of assert (common in tests)
    "FBT001", # boolean positional arg
    "FBT002", # boolean default arg
    "COM812", # trailing comma (handled by Black)
    "ISC001", # string concatenation (conflicts with Black)

    # Project-specific ignores
    "T201",   # print statements (allowed in scripts)
    "S603",   # subprocess without shell=True check
    "S607",   # starting process with partial executable path
]

# Configure import sorting (replaces isort)
[tool.ruff.lint.isort]
known-first-party = ["src"]
force-single-line = false
force-sort-within-sections = true
single-line-exclusions = ["typing"]

# Per-file rule customization - NO EVASION
[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",    # assert statements (required by pytest)
    "PLC0415", # allow imports inside test functions for patching/reloads
    "ARG001",  # allow unused test fixture args
    "B007",    # allow unused loop variables in tests
    "F841",    # allow assigned-but-unused in tests
    "PT011",   # broad pytest.raises in tests
    "B017",    # broad Exception in tests
    "SIM117",  # nested with in tests
    "PLR2004", # magic numbers in tests
]
"scripts/*" = [
    "T201",    # print statements (required for user feedback)
]
"scripts/check_architecture.py" = [
    "N802",    # AST visitor methods (visit_Import/visit_ImportFrom required by AST API)
]
"src/infrastructure/nats_publisher.py" = [
    "N814",    # allow aliasing Client as NATS for test patching
    "BLE001",  # broad exception in retry wrapper (operational guard)
]

# Disable ruff-format since we use Black
# [tool.ruff.format]  # Commented out to avoid conflict with Black

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow tests",
    "smoke: Smoke tests",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/migrations/*",
    # Live CTP connector is validated via live smoke/integration and is environment-specific
    "src/infrastructure/ctp_live_connector.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "if self.debug:",
    "if __name__ == \"__main__\":",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
]
precision = 2
show_missing = true

[tool.coverage.html]
directory = "htmlcov"
